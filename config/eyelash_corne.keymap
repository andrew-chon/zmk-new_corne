#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp LEFT_GUI  &kp Q  &kp W  &kp F         &kp P        &kp B                          &kp UP                &kp J        &kp L            &kp U         &kp Y    &kp SEMI  &kp RIGHT_CONTROL
&kp GRAVE     &kp A  &kp R  &kp S         &kp T        &kp G                &kp LEFT  &kp ENTER  &kp RIGHT  &kp M        &kp N            &kp E         &kp I    &kp O     &kp RIGHT_ALT
&kp LSHIFT    &kp Z  &kp X  &kp C         &kp D        &kp V      &trans              &kp DOWN              &kp K        &kp H            &kp COMMA     &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                            &lt 3 ESCAPE  &lt 2 SPACE  &lt 1 TAB                                            &lt 4 ENTER  &lt 5 BACKSPACE  &lt 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        nav {
            bindings = <
&none      &none         &none             &none           &none  &none                  &none         &kp K_REDO  &kp K_PASTE    &kp K_COPY     &kp K_CUT    &kp K_UNDO  &none
&kt LMETA  &kt LEFT_ALT  &kt LEFT_CONTROL  &kt LEFT_SHIFT  &none  &none           &none  &none  &none  &kp LEFT    &kp DOWN       &kp UP_ARROW   &kp LEFT     &kp CLCK    &none
&none      &none         &none             &none           &none  &none  &none           &none         &kp INSERT  &kp HOME       &kp PAGE_DOWN  &kp PAGE_UP  &kp END     &none
                                           &none           &none  &none                                &kt ENTER   &kp BACKSPACE  &kp DELETE
            >;
        };

        mouse {
            bindings = <
&none     &none     &none      &none      &none  &none                  &none         &kp K_REDO      &kp K_PASTE     &kp K_COPY    &kp K_CUT        &kp K_UNDO  &none
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &none           &none  &none  &none  &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &none       &none
&none     &none     &none      &none      &none  &none  &none           &none         &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none       &none
                               &none      &none  &none                                &mkp RCLK       &mkp LCLK       &mkp MCLK
            >;
        };

        media {
            bindings = <
&none     &none     &none      &none      &none  &none                  &none         &none       &none               &none              &none            &none         &none
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &none           &none  &none  &none  &none       &kp LS(C_PREVIOUS)  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &none
&none     &none     &none      &none      &none  &none  &none           &none         &bt BT_CLR  &bt BT_SEL 0        &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &none
                               &none      &none  &none                                &kp C_STOP  &kp C_PLAY_PAUSE    &kp C_MUTE
            >;
        };

        num {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT                     &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL            &trans  &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH   &trans            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                           &kp DOT  &kp N0  &kp MINUS                                    &trans  &trans     &trans
            >;
        };

        sym {
            bindings = <
&none  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                  &none         &none  &none      &none      &none     &none     &none
&none  &kp COLON       &kp DOLLAR       &kp AMPERSAND         &kp CARET              &kp PLUS                  &none  &none  &none  &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &none           &none         &none  &none      &none      &none     &none     &none
                                        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                 &none  &none      &none
            >;
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9     &trans                     &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6     &trans             &trans  &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3     &trans   &trans            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                         &trans  &kp SPACE  &kp TAB                                    &trans  &trans     &trans
            >;
        };
    };
};
